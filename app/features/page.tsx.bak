import { ArrowRightIcon } from '@/components/Icons';
import Image from 'next/image';
import { useTranslations } from 'next-intl';
import { Link } from '../../navigation';
import { motion } from 'framer-motion';

// Metadata is now handled by middleware

const features = [
  {
    title: 'Lightning-Fast Conversion',
    description: 'Convert files in seconds with our optimized conversion engine. Support for 100+ file formats.',
    icon: '⚡',
    color: 'bg-yellow-100 text-yellow-800',
  },
  {
    title: 'Batch Processing',
    description: 'Convert multiple files at once to save time. Perfect for processing large collections.',
    icon: '🔄',
    color: 'bg-blue-100 text-blue-800',
  },
  {
    title: 'Cloud Storage Integration',
    description: 'Connect with Dropbox, Google Drive, and OneDrive to convert files directly from your cloud storage.',
    icon: '☁️',
    color: 'bg-indigo-100 text-indigo-800',
  },
  {
    title: 'Advanced Compression',
    description: 'Reduce file sizes without losing quality using our smart compression algorithms.',
    icon: '📦',
    color: 'bg-green-100 text-green-800',
  },
  {
    title: 'Secure File Handling',
    description: 'Your files are encrypted during transfer and automatically deleted after 24 hours.',
    icon: '🔒',
    color: 'bg-red-100 text-red-800',
  },
  {
    title: 'Conversion History',
    description: 'Access your conversion history and download previously converted files anytime.',
    icon: '📋',
    color: 'bg-purple-100 text-purple-800',
  },
  {
    title: 'Custom Conversion Settings',
    description: 'Fine-tune your conversions with advanced settings for resolution, quality, and more.',
    icon: '⚙️',
    color: 'bg-gray-100 text-gray-800',
  },
  {
    title: 'API Access',
    description: 'Integrate our conversion capabilities into your own applications with our developer API.',
    icon: '🔌',
    color: 'bg-pink-100 text-pink-800',
  },
  {
    title: 'Gamification & Rewards',
    description: 'Earn points, unlock badges, and climb the leaderboard as you convert files.',
    icon: '🏆',
    color: 'bg-amber-100 text-amber-800',
  },
];

const fileCategories = [
  {
    name: 'Documents',
    formats: ['PDF', 'DOCX', 'XLSX', 'PPTX', 'TXT', 'RTF', 'ODT', 'CSV', 'HTML'],
    icon: '📄',
  },
  {
    name: 'Images',
    formats: ['JPG', 'PNG', 'WEBP', 'SVG', 'GIF', 'TIFF', 'BMP', 'ICO', 'HEIC'],
    icon: '🖼️',
  },
  {
    name: 'Audio',
    formats: ['MP3', 'WAV', 'FLAC', 'AAC', 'OGG', 'M4A', 'WMA', 'AIFF', 'OPUS'],
    icon: '🎵',
  },
  {
    name: 'Video',
    formats: ['MP4', 'AVI', 'MKV', 'MOV', 'WMV', 'WEBM', 'FLV', '3GP', 'M4V'],
    icon: '🎬',
  },
  {
    name: 'Archives',
    formats: ['ZIP', 'RAR', '7Z', 'TAR', 'GZ', 'BZ2', 'XZ', 'ISO', 'CAB'],
    icon: '📦',
  },
  {
    name: 'eBooks',
    formats: ['EPUB', 'MOBI', 'AZW', 'FB2', 'LIT', 'LRF', 'TCR', 'PDB', 'PDF'],
    icon: '📚',
  },
];

const FeatureCard = ({ feature, index }: { feature: typeof features[0], index: number }) => {
  return (
    <motion.div 
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5, delay: index * 0.1 }}
      className="bg-white rounded-xl shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300"
    >
      <div className="p-6">
        <div className={`inline-block p-3 rounded-full ${feature.color} mb-4 text-2xl`}>
          {feature.icon}
        </div>
        <h3 className="text-xl font-semibold mb-2">{feature.title}</h3>
        <p className="text-gray-600">{feature.description}</p>
      </div>
    </motion.div>
  );
};

const CategoryCard = ({ category, index }: { category: typeof fileCategories[0], index: number }) => {
  return (
    <motion.div 
      initial={{ opacity: 0, scale: 0.9 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.5, delay: index * 0.1 }}
      className="bg-white rounded-xl shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300"
    >
      <div className="p-6">
        <div className="text-3xl mb-3">{category.icon}</div>
        <h3 className="text-xl font-semibold mb-3">{category.name}</h3>
        <div className="flex flex-wrap gap-2">
          {category.formats.map((format, idx) => (
            <span key={idx} className="inline-block bg-gray-100 rounded-full px-3 py-1 text-sm font-semibold text-gray-700">
              {format}
            </span>
          ))}
        </div>
      </div>
    </motion.div>
  );
};

export default function FeaturesPage() {
  const t = useTranslations('features');
  
  // Update feature titles and descriptions with translations
  const translatedFeatures = features.map(feature => ({
    ...feature,
    title: t(`features.${feature.title.toLowerCase().replace(/-/g, '_').replace(/ /g, '_')}.title`),
    description: t(`features.${feature.title.toLowerCase().replace(/-/g, '_').replace(/ /g, '_')}.description`)
  }));

  // Update category names with translations
  const translatedCategories = fileCategories.map(category => ({
    ...category,
    name: t(`categories.${category.name.toLowerCase()}`)
  }));
  
  return (
    <div className="min-h-screen">
      {/* Hero Section */}
      <section className="bg-gradient-to-r from-primary-600 to-primary-800 text-white py-20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <motion.h1 
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
              className="text-4xl md:text-5xl font-bold mb-6"
            >
              {t('hero.title')}
            </motion.h1>
            <motion.p 
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.5, delay: 0.2 }}
              className="text-xl max-w-3xl mx-auto mb-8"
            >
              {t('hero.description')}
            </motion.p>
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: 0.4 }}
            >
              <Link 
                href="/convert" 
                className="inline-flex items-center bg-white text-primary-600 font-semibold px-6 py-3 rounded-lg shadow-md hover:bg-gray-100 transition-colors duration-300"
              >
                {t('hero.cta_button')}
                <ArrowRightIcon className="ml-2 h-5 w-5" />
              </Link>
            </motion.div>
          </div>
        </div>
      </section>

      {/* Main Features Grid */}
      <section className="py-16 bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">{t('main_features.title')}</h2>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto">{t('main_features.description')}</p>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {translatedFeatures.map((feature, index) => (
              <FeatureCard key={index} feature={feature} index={index} />
            ))}
          </div>
        </div>
      </section>

      {/* File Format Categories */}
      <section className="py-16 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">{t('file_formats.title')}</h2>
            <p className="text-xl text-gray-600 max-w-3xl mx-auto">{t('file_formats.description')}</p>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {translatedCategories.map((category, index) => (
              <CategoryCard key={index} category={category} index={index} />
            ))}
          </div>
          <div className="text-center mt-12">
            <Link 
              href="/convert" 
              className="inline-flex items-center bg-primary-600 text-white font-semibold px-6 py-3 rounded-lg shadow-md hover:bg-primary-700 transition-colors duration-300"
            >
              {t('file_formats.cta_button')}
              <ArrowRightIcon className="ml-2 h-5 w-5" />
            </Link>
          </div>
        </div>
      </section>

      {/* Gamification Feature */}
      <section className="py-16 bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
            <motion.div 
              initial={{ opacity: 0, x: -50 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5 }}
              viewport={{ once: true }}
            >
              <h2 className="text-3xl font-bold text-gray-900 mb-6">{t('gamification.title')}</h2>
              <p className="text-xl text-gray-600 mb-6">{t('gamification.description')}</p>
              <ul className="space-y-4 mb-8">
                <li className="flex items-start">
                  <span className="flex-shrink-0 h-6 w-6 text-primary-600 mr-2">✓</span>
                  <span>{t('gamification.features.points')}</span>
                </li>
                <li className="flex items-start">
                  <span className="flex-shrink-0 h-6 w-6 text-primary-600 mr-2">✓</span>
                  <span>{t('gamification.features.badges')}</span>
                </li>
                <li className="flex items-start">
                  <span className="flex-shrink-0 h-6 w-6 text-primary-600 mr-2">✓</span>
                  <span>{t('gamification.features.leaderboard')}</span>
                </li>
                <li className="flex items-start">
                  <span className="flex-shrink-0 h-6 w-6 text-primary-600 mr-2">✓</span>
                  <span>{t('gamification.features.progress')}</span>
                </li>
              </ul>
              <Link 
                href="/badges" 
                className="inline-flex items-center text-primary-600 font-semibold hover:text-primary-800 transition-colors duration-300"
              >
                {t('gamification.view_badges')}
                <ArrowRightIcon className="ml-2 h-5 w-5" />
              </Link>
            </motion.div>
            <motion.div 
              initial={{ opacity: 0, x: 50 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5 }}
              viewport={{ once: true }}
              className="relative h-96 rounded-xl overflow-hidden shadow-xl"
            >
              <div className="absolute inset-0 bg-gradient-to-r from-primary-600 to-primary-800 opacity-20 rounded-xl"></div>
              <div className="absolute inset-0 flex items-center justify-center">
                <div className="text-center p-6 bg-white bg-opacity-90 rounded-xl shadow-lg max-w-md">
                  <div className="text-5xl mb-4">🏆</div>
                  <h3 className="text-2xl font-bold mb-2">{t('gamification.badge.title')}</h3>
                  <p className="text-gray-700 mb-4">{t('gamification.badge.description')}</p>
                  <div className="w-full bg-gray-200 rounded-full h-2.5 mb-4">
                    <div className="bg-primary-600 h-2.5 rounded-full w-full"></div>
                  </div>
                  <p className="text-sm text-gray-500">{t('gamification.badge.level_info')}</p>
                </div>
              </div>
            </motion.div>
          </div>
        </div>
      </section>

      {/* API Section */}
      <section className="py-16 bg-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
            <motion.div 
              initial={{ opacity: 0, x: 50 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5 }}
              viewport={{ once: true }}
              className="order-2 lg:order-1"
            >
              <div className="bg-gray-800 rounded-xl p-6 shadow-xl overflow-hidden">
                <pre className="text-green-400 font-mono text-sm overflow-x-auto">
                  <code>
{`// Example API request to convert a file
const response = await fetch('https://api.convertviral.com/convert', {
  method: 'POST',
  headers: {
    'Authorization': 'Bearer YOUR_API_KEY',
    'Content-Type': 'application/json'
  },
  body: JSON.stringify({
    sourceFormat: 'pdf',
    targetFormat: 'docx',
    fileUrl: 'https://example.com/document.pdf'
  })
});

const result = await response.json();
console.log(result.downloadUrl);`}
                  </code>
                </pre>
              </div>
            </motion.div>
            <motion.div 
              initial={{ opacity: 0, x: -50 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.5 }}
              viewport={{ once: true }}
              className="order-1 lg:order-2"
            >
              <h2 className="text-3xl font-bold text-gray-900 mb-6">{t('api.title')}</h2>
              <p className="text-xl text-gray-600 mb-6">{t('api.description')}</p>
              <ul className="space-y-4 mb-8">
                <li className="flex items-start">
                  <span className="flex-shrink-0 h-6 w-6 text-primary-600 mr-2">✓</span>
                  <span>{t('api.features.documentation')}</span>
                </li>
                <li className="flex items-start">
                  <span className="flex-shrink-0 h-6 w-6 text-primary-600 mr-2">✓</span>
                  <span>{t('api.features.formats')}</span>
                </li>
                <li className="flex items-start">
                  <span className="flex-shrink-0 h-6 w-6 text-primary-600 mr-2">✓</span>
                  <span>{t('api.features.webhooks')}</span>
                </li>
                <li className="flex items-start">
                  <span className="flex-shrink-0 h-6 w-6 text-primary-600 mr-2">✓</span>
                  <span>{t('api.features.pricing')}</span>
                </li>
              </ul>
              <Link 
                href="/pricing" 
                className="inline-flex items-center text-primary-600 font-semibold hover:text-primary-800 transition-colors duration-300"
              >
                {t('api.view_pricing')}
                <ArrowRightIcon className="ml-2 h-5 w-5" />
              </Link>
            </motion.div>
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-16 bg-primary-600 text-white">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <h2 className="text-3xl font-bold mb-6">{t('cta.title')}</h2>
          <p className="text-xl max-w-3xl mx-auto mb-8">{t('cta.description')}</p>
          <div className="flex flex-col sm:flex-row justify-center gap-4">
            <Link 
              href="/convert" 
              className="inline-flex items-center justify-center bg-white text-primary-600 font-semibold px-6 py-3 rounded-lg shadow-md hover:bg-gray-100 transition-colors duration-300"
            >
              {t('cta.convert_button')}
              <ArrowRightIcon className="ml-2 h-5 w-5" />
            </Link>
            <Link 
              href="/signup" 
              className="inline-flex items-center justify-center bg-primary-700 text-white font-semibold px-6 py-3 rounded-lg shadow-md hover:bg-primary-800 transition-colors duration-300 border border-white border-opacity-20"
            >
              {t('cta.signup_button')}
            </Link>
          </div>
        </div>
      </section>
    </div>
  );
}